//
//  MagicSEUtil.m
//  tpayOprTestApk
//
//  Created by jeichlee on 2017. 3. 27..
//  Copyright © 2017년 jeichlee. All rights reserved.
//

#import "MagicSEUtil.h"
#import "HTTPClient.h"
#import "UserInfo.h"
#import "MagicSE2.h"


static Boolean progress_yn = NO;

@interface MagicSEUtil()

@end

@implementation MagicSEUtil

unsigned char pRootCert[] = {
    0x30,0x82,0x03,0x5B,0x30,0x82,0x02,0x43,0xA0,0x03,0x02,0x01,0x02,0x02,0x01,0x01,
    0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,0x30,
    0x5D,0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x4B,0x52,0x31,0x16,
    0x30,0x14,0x06,0x03,0x55,0x04,0x0A,0x0C,0x0D,0x44,0x72,0x65,0x61,0x6D,0x53,0x65,
    0x63,0x75,0x72,0x69,0x74,0x79,0x31,0x12,0x30,0x10,0x06,0x03,0x55,0x04,0x0B,0x0C,
    0x09,0x4D,0x61,0x67,0x69,0x63,0x53,0x45,0x76,0x32,0x31,0x22,0x30,0x20,0x06,0x03,
    0x55,0x04,0x03,0x0C,0x19,0x44,0x72,0x65,0x61,0x6D,0x53,0x65,0x63,0x75,0x72,0x69,
    0x74,0x79,0x20,0x72,0x6F,0x6F,0x74,0x43,0x41,0x20,0x32,0x30,0x34,0x38,0x30,0x1E,
    0x17,0x0D,0x31,0x31,0x30,0x38,0x32,0x39,0x30,0x32,0x33,0x31,0x31,0x30,0x5A,0x17,
    0x0D,0x33,0x36,0x30,0x38,0x32,0x39,0x30,0x32,0x33,0x31,0x31,0x30,0x5A,0x30,0x5D,
    0x31,0x0B,0x30,0x09,0x06,0x03,0x55,0x04,0x06,0x13,0x02,0x4B,0x52,0x31,0x16,0x30,
    0x14,0x06,0x03,0x55,0x04,0x0A,0x0C,0x0D,0x44,0x72,0x65,0x61,0x6D,0x53,0x65,0x63,
    0x75,0x72,0x69,0x74,0x79,0x31,0x12,0x30,0x10,0x06,0x03,0x55,0x04,0x0B,0x0C,0x09,
    0x4D,0x61,0x67,0x69,0x63,0x53,0x45,0x76,0x32,0x31,0x22,0x30,0x20,0x06,0x03,0x55,
    0x04,0x03,0x0C,0x19,0x44,0x72,0x65,0x61,0x6D,0x53,0x65,0x63,0x75,0x72,0x69,0x74,
    0x79,0x20,0x72,0x6F,0x6F,0x74,0x43,0x41,0x20,0x32,0x30,0x34,0x38,0x30,0x82,0x01,
    0x22,0x30,0x0D,0x06,0x09,0x2A,0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x01,0x05,0x00,
    0x03,0x82,0x01,0x0F,0x00,0x30,0x82,0x01,0x0A,0x02,0x82,0x01,0x01,0x00,0xD3,0xB7,
    0x6D,0x74,0x8F,0x09,0x63,0x3D,0xD7,0x8B,0x51,0x29,0xE1,0x16,0x8D,0x86,0x21,0x1F,
    0x13,0x95,0x7B,0x3E,0x9B,0xC1,0xE8,0xC4,0x7D,0xD1,0x64,0xE1,0x88,0x66,0x3C,0xA6,
    0x14,0xA9,0xCA,0xF4,0xE6,0x88,0xB9,0xC2,0x98,0x84,0x4D,0xD4,0xA9,0x4E,0xBD,0x07,
    0x82,0x2D,0xE4,0x3F,0x0D,0x02,0x07,0x7E,0x43,0xBB,0x7F,0x59,0xBC,0x2C,0xC0,0x6F,
    0x6F,0xF6,0x9E,0xBF,0xD9,0x57,0x22,0x38,0x6E,0x94,0x1A,0x55,0xE4,0x95,0x68,0xB6,
    0x0A,0xDF,0x60,0xA7,0xEF,0x1C,0x79,0x90,0xE0,0xDB,0x8B,0x2B,0x1E,0xC6,0x4E,0x01,
    0xC9,0xEF,0xBF,0x08,0xB4,0x74,0xDE,0xBE,0x73,0xCD,0x09,0xB3,0x2B,0x4E,0xB7,0x5C,
    0x95,0xBF,0xC1,0x58,0xFD,0x73,0xAF,0x61,0x44,0x8C,0x5B,0x42,0xBA,0x21,0x84,0x00,
    0xBC,0x77,0x42,0xF3,0xFA,0xDF,0xA1,0xD1,0xAA,0x38,0x3C,0x0F,0xC8,0x89,0xF4,0xAE,
    0x84,0xE2,0xF8,0x0C,0xC1,0x7C,0x2F,0x7C,0x43,0xFD,0x1C,0xF2,0x53,0x9D,0x6A,0xBB,
    0x0B,0xC1,0xDA,0x37,0xF0,0x36,0xBB,0x73,0x1D,0x7A,0x73,0x61,0x6C,0x95,0x4D,0xA7,
    0xF3,0xA3,0xE7,0x2E,0xEB,0x35,0x88,0x96,0xDE,0xA3,0x34,0x62,0xD4,0x8D,0x6D,0x6C,
    0x1D,0x38,0x6C,0x54,0xB0,0x5F,0xF6,0x99,0xB9,0x63,0x2E,0x15,0x3D,0xB5,0x9B,0x98,
    0xF3,0xC0,0x37,0x7D,0xFF,0x61,0x19,0x20,0xF1,0x04,0xA3,0x0A,0xA9,0x24,0xBF,0xDE,
    0x46,0xA5,0xFD,0x54,0x49,0xF7,0x1A,0x13,0xBD,0xEB,0xF9,0x97,0xD6,0x2F,0xE5,0x01,
    0x3B,0x4D,0x27,0x84,0x40,0x1F,0xB1,0xE6,0xF6,0x75,0x6A,0xCC,0x2F,0x29,0x02,0x03,
    0x01,0x00,0x01,0xA3,0x26,0x30,0x24,0x30,0x12,0x06,0x03,0x55,0x1D,0x13,0x01,0x01,
    0xFF,0x04,0x08,0x30,0x06,0x01,0x01,0xFF,0x02,0x01,0x00,0x30,0x0E,0x06,0x03,0x55,
    0x1D,0x0F,0x01,0x01,0xFF,0x04,0x04,0x03,0x02,0x02,0x04,0x30,0x0D,0x06,0x09,0x2A,
    0x86,0x48,0x86,0xF7,0x0D,0x01,0x01,0x0B,0x05,0x00,0x03,0x82,0x01,0x01,0x00,0x33,
    0xFC,0xD1,0x52,0x03,0xBB,0x09,0xA0,0xF9,0x5C,0xCD,0x97,0x03,0x21,0xD7,0xB5,0x1C,
    0x52,0xFC,0x50,0x71,0x9B,0x01,0xD4,0xDC,0x96,0xF0,0x86,0x21,0x60,0x0F,0x61,0x46,
    0x00,0x85,0x0C,0x7E,0x18,0xAF,0x51,0x3E,0x7C,0xC6,0x06,0x24,0x8F,0x60,0x0A,0x6B,
    0xC9,0x87,0x48,0x34,0x6F,0xD6,0xAF,0x1E,0xA2,0xAB,0x5D,0x7C,0xD8,0xFD,0x73,0x87,
    0x68,0xB8,0x05,0xB9,0x4F,0x19,0xF5,0x12,0x04,0xF8,0xD4,0xBA,0xAB,0xD3,0xAA,0x84,
    0xEF,0xB1,0xA5,0x17,0xE5,0xF9,0xE4,0xAF,0x7B,0x0C,0x63,0x98,0xF1,0x40,0xA5,0x9D,
    0x8A,0x24,0x73,0xA9,0x87,0xEE,0xCD,0x9C,0x12,0x22,0x59,0xC5,0xE8,0x16,0xD9,0x6C,
    0xA3,0x57,0x00,0x50,0x10,0x3F,0x7F,0x7A,0xB0,0xA2,0xE7,0x09,0xCE,0xC5,0x9A,0xD1,
    0x3F,0xF5,0x06,0x0F,0x84,0xA4,0xE5,0xC2,0xF2,0x6E,0xA4,0x2D,0x9D,0x2E,0x5A,0xE0,
    0x00,0xED,0xC2,0x4B,0x43,0x27,0xC1,0x11,0x85,0x12,0xD2,0x6E,0xAE,0xC2,0xFB,0x13,
    0x8C,0x01,0x07,0xC0,0x4A,0xCE,0x90,0x39,0x87,0x1D,0x27,0xAB,0xC3,0x53,0x69,0x4C,
    0x43,0x2C,0xE2,0x2B,0x37,0x63,0x46,0x1F,0xF1,0xE0,0x20,0x05,0x21,0xCF,0xC1,0x1F,
    0x1F,0x56,0xD4,0x60,0x73,0x09,0x77,0x5A,0x54,0xE1,0x4F,0x54,0x21,0xD4,0xD3,0x23,
    0x3D,0xEC,0x75,0x29,0x91,0xCF,0xFA,0xA0,0xD9,0x59,0x31,0x69,0xA9,0x3E,0xD6,0x99,
    0xD2,0xF4,0x7F,0x37,0x87,0x34,0x62,0x99,0x9F,0x7C,0x47,0x36,0x64,0xBE,0xB9,0x02,
    0x6C,0x10,0xD6,0xEA,0x92,0x36,0xCC,0xD6,0xE2,0x24,0xC7,0x04,0x6A,0xC5,0x59
};

-(NSString *) MSE_Init
{
    return nil;
}

-(Boolean) progressContrl:(int)flag
{
    @synchronized (self) {
        //        NSLog(@"%@", progress_yn ? @"YES" : @"NO");
        
        if(progress_yn == NO)
        {
            if(flag == 1) {
                progress_yn = YES;
                NSLog(@"%@", progress_yn ? @"YES" : @"NO");
                return YES;
            } else {
                return NO;
            }
            
            
        } else {
            if(flag == 1) {
                progress_yn = NO;
                NSLog(@"%@", progress_yn ? @"YES" : @"NO");
                return NO;
            } else {
                return YES;
            }
            
        }
    }
}


-(NSString *) MSE_Enc:(NSString *)pureStr
{
    NSString *mseSessionKey = [UserInfo getMseSessionKey];
    NSLog(@"mseSessionKey=%@",mseSessionKey);
    if(mseSessionKey == nil || [mseSessionKey isEqualToString:@""]) {
        //초기화
        NSLog(@"MagicSE Session Initailize Start");
        [self INN_SecurityCertificate];
        //        [self INN_Call_Seq:@"SecurityCertificate"]; //서버 인증서 수신
        //        [self INN_Call_Seq:@"SecuritySessionKey"];  //서버 인증서 기반 Client SessionKey생성 후 서버 전달 - HandShake Validation
        //        [self INN_Call_Seq:@"GetSessionId"];        //고객 서버 Session_id 수신
        //        [self INN_Call_Seq:@"SessionInitialize"];   //Session초기화
        //        NSLog(@"MagicSE Session Initailize End");
    }
    
    //MagicSE E2E 암호화
    
    NSString *enc_str = nil;
    return enc_str;
    
}

-(NSString *) MSE_Dec:(NSString *)encStr
{
    NSString *mseSessionKey = [UserInfo getMseSessionKey];
    
    NSLog(@"MSESessionKey=%@ | ENCStr=%@", mseSessionKey, encStr);
    char *pszSessionKey = (char *)[mseSessionKey UTF8String];
    char *pszEncString = (char *)[encStr UTF8String];
    unsigned char *pPlainText1 = 0x00;
    int nPlainTextLen1 = 0;
    
    int nRv = MagicSE_DecData( pszSessionKey, pszEncString, &pPlainText1, &nPlainTextLen1);
    if( nRv != MAGICSE_OK ) {
        [self FreeMSE:nRv];
        return nil;
    } else {
        NSString *decStr = [NSString stringWithUTF8String: (char*)pPlainText1];
        NSLog(@"복호화 후 STR= %@", decStr);
        return decStr;
    }
}

-(void) FreeMSE:(int)nRv
{
    NSLog(@"[FreeMSE] MagicSE Return Code=%d",nRv);
}

-(void) INN_Call_Seq:(NSString *)func_name
{
    while(1) {
        if([self progressContrl:0] == NO) {
            if([func_name isEqualToString:@"SecurityCertificate"]) {
                [self progressContrl:1];
                [self INN_SecurityCertificate];
                break;
            } else if([func_name isEqualToString:@"SecuritySessionKey"]) {
                [self progressContrl:1];
                [self INN_SecuritySessionKey];
                break;
            } else if([func_name isEqualToString:@"SessionInitialize"]) {
                [self progressContrl:1];
                [self INN_SessionInitialize];
                break;
            } else if([func_name isEqualToString:@"GetSessionId"]) {
                [self progressContrl:1];
                [self INN_SessionInitialize];
                break;
            }
        }
    }
}

-(void) INN_MSE_Handshake
{
    
}

-(void) INN_SecurityCertificate
{
    NSLog(@"INN_SecurityCertificate");
    
    HTTPClient *client = [HTTPClient sharedHTTPClient:[UserInfo getJsessionId]];
    [client setDelegate:self];
    [client serverAPICall:nil andURL:@"App-SecurityCertificate"];
}


-(void) INN_SecuritySessionKey
{
    
    NSLog(@"INN_SecuritySessionKey");
    NSString *serverCert = [UserInfo getServerCerificate];
    NSLog(@"[INN_SecuritySessionKey] serverCert=%@",serverCert);
    NSString *jsessionId = [UserInfo getJsessionId];
    char *pszServerCert = (char *)[serverCert UTF8String];
    char *pszSessionKey = 0x00;
    char *pszEncSessionKey = 0x00;
    int nRv = 0;
    
    nRv = MagicSE_HandShakeSessionKey( pszServerCert, &pszSessionKey, pRootCert, sizeof(pRootCert) );
    
    if(nRv != MAGICSE_OK) {
        // 오류 리턴 하고 끝냄
        NSLog(@"MagicSE1 Error | Error Code=%d", nRv);
    }
    
    nRv = MagicSE_GetEncSessionKey( pszSessionKey, &pszEncSessionKey );
    
    if(nRv != MAGICSE_OK) {
        // 오류 리턴 하고 끝냄
        NSLog(@"MagicSE2 Error | Error Code=%d", nRv);
    }
    
    NSString *encSessionKey = [NSString stringWithUTF8String:pszEncSessionKey];
    NSString *decSessionKey = [NSString stringWithUTF8String:pszSessionKey];
    
    NSMutableDictionary *requestDict = [[NSMutableDictionary alloc]init];
    [requestDict setObject:encSessionKey forKey:@"SECURITY_SESSION_KEY"];
    
    HTTPClient *client = [HTTPClient sharedHTTPClient:jsessionId];
    [client setDelegate:self];
    [client serverAPICall:requestDict andURL:@"App-SecuritySessionKey"];
    
    //정상이면 SecuritySessionKey를 UserInfo에 Setting
    [UserInfo setMseSessionKey:decSessionKey];
}


-(void) INN_SessionInitialize
{
    NSString *jsessionId = [UserInfo getJsessionId];
    NSString *session_id = [UserInfo getServerSessionId];
    NSLog(@"INN_SessionInitialize | jsessionId=%@ | serverSessionId=%@",jsessionId, session_id);
    
    NSMutableDictionary *reqDict = [[NSMutableDictionary alloc]init];
    [reqDict setObject:session_id forKey:@"SESSION_ID"];
    HTTPClient *client = [HTTPClient sharedHTTPClient:jsessionId];
    [client setDelegate:self];
    [client serverAPICall:reqDict andURL:@"App-SessionInitialize"];
}



-(void) INN_GetSessionId
{
    NSLog(@"INN_GetSessionId");
    NSString *sessionId = [UserInfo getServerSessionId];
    if(sessionId == nil || [sessionId isEqualToString:@""])
    {
        NSMutableDictionary *reqDict = [[NSMutableDictionary alloc]init];
        [reqDict setObject:[UserInfo getUserMdn] forKey:@"MDN"];
        HTTPClient *client = [HTTPClient sharedHTTPClient:nil];
        [client setDelegate:self];
        [client serverAPICall:reqDict andURL:@"App-GetSessionId"];
    }
}

-(void)HTTPClient:(HTTPClient *)sharedHTTPClient didSucceedWithResponse:(NSMutableDictionary *)responseObject andApi:(id)apiType
{
    NSLog(@"didSucceedWithResponse | %@", apiType);
    
    
    NSDictionary *header = (NSDictionary *)[responseObject objectForKey:@"header"];
    NSDictionary *body = (NSDictionary *)[responseObject objectForKey:@"body"];
    NSLog(@"HEADER %@", header);
    NSLog(@"BODY %@", body);
    NSLog(@"API_TYPE %@", (NSString *)apiType);
    
    if([[body objectForKey:@"RESULT_CODE"] isEqualToString:@"0"]) {
        //성공
        if([(NSString *)apiType isEqualToString:@"App-SecurityCertificate"]) {
            [UserInfo setServerCertificate:[body objectForKey:@"SECURITY_CERTIFICATE"]];
            [UserInfo setJsessionId:[header objectForKey:@"JSessionId"]];
            [self INN_SecuritySessionKey];  //서버 인증서 기반 Client SessionKey생성 후 서버 전달 - HandShake Validation
        } else if([(NSString *)apiType isEqualToString:@"App-SecuritySessionKey"]) {
            [UserInfo setNfilterPublicKey:[body objectForKey:@"NFILTER_PUBLIC_KEY"]];
            NSString *enc_test_str = [body objectForKey:@"SECURITY_INIT_DATA"];
            //MagicSE 복호화 테스트 - 복호화 실패시 프로세스 고민 필요 - 재시도?
            NSLog(@"복호화 테스트 String=%@",enc_test_str);
            [self INN_GetSessionId];        //고객 서버 Session_id 수신
        } else if([(NSString *)apiType isEqualToString:@"App-SessionInitialize"]) {
            //파싱할 필요 없음 - 리턴 항목 없음
        } else if([(NSString *)apiType isEqualToString:@"App-GetSessionId"]) {
            NSString *enc_session_id = [body objectForKey:@"ENCRYPT_DATA"];
            NSString *dec_session_id = [self MSE_Dec:enc_session_id];
            
            NSError *jsonError;
            NSData *objectData = [dec_session_id dataUsingEncoding:NSUTF8StringEncoding];
            NSDictionary *json = [NSJSONSerialization JSONObjectWithData:objectData
                                                                 options:NSJSONReadingMutableContainers
                                                                   error:&jsonError];
            dec_session_id = [json objectForKey:@"SESSION_ID"];
            NSLog(@"DEC_SESSION_ID=%@",dec_session_id);
            [UserInfo setServerSessionId:dec_session_id];
            [self INN_SessionInitialize];   //Session초기화
        }
    } else {
        //오류
        NSLog(@"서버연동 오류 %@ | %@",apiType, [body objectForKey:@"RESULT_CODE"]);
    }
    [self progressContrl:1];
}

-(void)HTTPClient:(HTTPClient *)sharedHTTPClient didFailWithError:(NSError *)error
{
    NSLog(@"didFailWithError | MagicSEUtil : %@", [error localizedDescription]);
    [self progressContrl:1];
    exit(0);
}
@end
